"""
B. –ü—Ä–æ—Å—Ç–æ –ø–æ—Ç–æ–∫

–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç: 5 —Å–µ–∫—É–Ω–¥
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç: 1024 –º–µ–≥–∞–±–∞–π—Ç–∞
–≤–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥

–î–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –∏–∑ —É–∑–ª–æ–≤ –∏ —Ç—Ä—É–±, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–µ—Ç —Ç–µ—á—å –≤–æ–¥–∞.
–î–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä—É–±—ã –∏–∑–≤–µ—Å—Ç–Ω–∞ –Ω–∞–∏–±–æ–ª—å—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, —Å –∫–æ—Ç–æ—Ä–æ–π –≤–æ–¥–∞ –º–æ–∂–µ—Ç –ø—Ä–æ—Ç–µ–∫–∞—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–µ.
–ò–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ –≤–æ–¥–∞ —Ç–µ—á–µ—Ç –ø–æ —Ç—Ä—É–±–∞–º —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞–∂–¥—ã–π —É–∑–µ–ª
(–∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –¥–≤—É—Ö ‚Äî –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏ —Å—Ç–æ–∫–∞) –≤—Ç–µ–∫–∞–µ—Ç —Ä–æ–≤–Ω–æ —Å—Ç–æ–ª—å–∫–æ –≤–æ–¥—ã, —Å–∫–æ–ª—å–∫–æ –∏–∑ –Ω–µ–≥–æ –≤—ã—Ç–µ–∫–∞–µ—Ç.

–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–π—Ç–∏ –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã, –∫–æ—Ç–æ—Ä–æ–µ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏ –º–æ–∂–µ—Ç –ø—Ä–æ—Ç–µ–∫–∞—Ç—å –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏ —Å—Ç–æ–∫–æ–º,
–∞ —Ç–∞–∫–∂–µ —Å–∫–æ—Ä–æ—Å—Ç—å —Ç–µ—á–µ–Ω–∏—è –≤–æ–¥—ã –ø–æ –∫–∞–∂–¥–æ–π –∏–∑ —Ç—Ä—É–±.

–¢—Ä—É–±—ã —è–≤–ª—è—é—Ç—Å—è –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏, —Ç–æ –µ—Å—Ç—å –≤–æ–¥–∞ –≤ –Ω–∏—Ö –º–æ–∂–µ—Ç —Ç–µ—á—å –≤ –ª—é–±–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.
–ú–µ–∂–¥—É –ª—é–±–æ–π –ø–∞—Ä–æ–π —É–∑–ª–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–π —Ç—Ä—É–±—ã.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ùëÅ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ (2‚â§ùëÅ‚â§100).
–ò–∑–≤–µ—Å—Ç–Ω–æ, —á—Ç–æ –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–º–µ–µ—Ç –Ω–æ–º–µ—Ä 1, –∞ —Å—Ç–æ–∫ –Ω–æ–º–µ—Ä ùëÅ.
–í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ ùëÄ (1‚â§ùëÄ‚â§5000) ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä—É–± –≤ —Å–∏—Å—Ç–µ–º–µ.
–î–∞–ª–µ–µ –≤ ùëÄ —Å—Ç—Ä–æ–∫–∞—Ö –∏–¥–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä—É–±.
–ö–∞–∂–¥–∞—è —Ç—Ä—É–±–∞ –∑–∞–¥–∞–µ—Ç—Å—è —Ç—Ä–æ–π–∫–æ–π —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª ùê¥ùëñ, ùêµùëñ, ùê∂ùëñ, –≥–¥–µ ùê¥ùëñ, ùêµùëñ ‚Äî –Ω–æ–º–µ—Ä–∞ —É–∑–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω–∞—è —Ç—Ä—É–±–∞ (ùê¥ùëñ‚â†ùêµùëñ),
–∞ ùê∂ùëñ (0‚â§ùê∂ùëñ‚â§10^4) ‚Äî –Ω–∞–∏–±–æ–ª—å—à–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Ç–µ—á–µ–Ω–∏—è –≤–æ–¥—ã —á–µ—Ä–µ–∑ –¥–∞–Ω–Ω—É—é —Ç—Ä—É–±—É.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—ã–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ—Ç–µ–∫–∞–µ—Ç –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏ —Å—Ç–æ–∫–æ–º –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –≤—Ä–µ–º–µ–Ω–∏.
–î–∞–ª–µ–µ –≤—ã–≤–µ–¥–∏—Ç–µ ùëÄ —Å—Ç—Ä–æ–∫, –≤ –∫–∞–∂–¥–æ–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã–≤–µ–¥–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å —Ç–µ—á–µ–Ω–∏—è –≤–æ–¥—ã –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ç—Ä—É–±–µ.
–ï—Å–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ—Ä—è–¥–∫–æ–º —É–∑–ª–æ–≤, –∑–∞–¥–∞–Ω–Ω—ã–º –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö,
—Ç–æ –≤—ã–≤–æ–¥–∏—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ –∑–Ω–∞–∫–æ–º –º–∏–Ω—É—Å. –ß–∏—Å–ª–∞ –≤—ã–≤–æ–¥–∏—Ç–µ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 10^‚àí3.

–ü—Ä–∏–º–µ—Ä—ã
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
2
2
1 2 1
2 1 3
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
4
1
-3

–¢–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ –≠–¥–º–æ–Ω–¥—Å-–ö–∞—Ä–ø —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""
import sys
from collections import defaultdict, deque


START_VERTEX = 0
INF = float('inf')


class Edge:
    def __init__(self, a, b, c):
        self.start = a
        self.end = b
        self.capacity = c
        self.flow = 0
        self.back_edge = None

    def set_back_edge(self, back_edge):
        self.back_edge = back_edge


class Graph:
    def __init__(self, n):
        self.size = n
        self.edges = defaultdict(list)
        self.real_edges = []
        self.max_flow = 0
        self.start_vertex = START_VERTEX
        self.target_vertex = n - 1
        self.used = [0 for _ in range(n)]
        self.max_capacity = 0

    def add_edge(self, a, b, c):
        edge = Edge(a, b, c)
        back_edge = Edge(b, a, c)

        back_edge.set_back_edge(edge)
        edge.set_back_edge(back_edge)

        self.edges[a].append(edge)
        self.edges[b].append(back_edge)

        self.real_edges.append(edge)

        self.max_capacity = max(self.max_capacity, c)

    def bfs(self, v, delta):
        queue = deque([v])
        current_flow = INF
        while queue:
            current_v = queue.popleft()
            for edge in self.edges[current_v]:
                if not self.used[edge.end] and edge.flow < edge.capacity and delta <= edge.capacity - edge.flow:
                    self.used[edge.end] = edge
                    current_flow = min(current_flow, edge.capacity - edge.flow)
                    queue.append(edge.end)

                    if self.target_vertex == edge.end:
                        return current_flow
        return 0

    def get_deltas_array(self):
        deltas = []
        delta = 1
        deltas.append(delta)
        while 2 * delta <= self.max_capacity:
            delta *= 2
            deltas.append(delta)
        return deltas[::-1]

    def edmonds_karp(self):
        deltas = self.get_deltas_array()
        for delta in deltas:
            current_flow = 1
            while current_flow:
                self.used = [0 for _ in range(self.size)]
                current_flow = self.bfs(self.start_vertex, delta)
                if current_flow:
                    v = self.target_vertex
                    while self.start_vertex != v:
                        u = self.used[v]
                        u.flow += current_flow
                        u.back_edge.flow -= current_flow
                        v = u.start
                self.max_flow += current_flow
        return self.max_flow


def main():
    data = sys.stdin.buffer.read().splitlines()
    n = int(data[0])
    m = int(data[1])
    graph = Graph(n)
    for row in data[2:]:
        a, b, c = map(int, row.split())
        graph.add_edge(a - 1, b - 1, c)
    print(graph.edmonds_karp())
    for edge in graph.real_edges:
        print(edge.flow)


if __name__ == "__main__":
    main()
