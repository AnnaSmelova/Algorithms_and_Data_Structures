"""
C. –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞

–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç: 2 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç: 256 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥

–î–∞–Ω –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–µ–≤–∑–≤–µ—à–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–∞–Ω—ã –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ ùëõ –∏ ùëö
(1‚â§ùëõ‚â§100000, 0‚â§ùëö‚â§100000) ‚Äî —á–∏—Å–ª–æ –≤–µ—Ä—à–∏–Ω –∏ —Ä—ë–±–µ—Ä –≤ –≥—Ä–∞—Ñ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
–î–∞–ª–µ–µ –≤ ùëö —Å—Ç—Ä–æ–∫–∞—Ö –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã —Ä—ë–±—Ä–∞ –≥—Ä–∞—Ñ–∞.
–ö–∞–∂–¥–æ–µ —Ä–µ–±—Ä–æ –∑–∞–¥–∞—ë—Ç—Å—è –ø–∞—Ä–æ–π —á–∏—Å–µ–ª ‚Äî –Ω–æ–º–µ—Ä–∞–º–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π –≤–µ—Ä—à–∏–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—ã–≤–µ–¥–∏—Ç–µ –ª—é–±—É—é —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≥—Ä–∞—Ñ–∞ –≤ –≤–∏–¥–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–æ–≤ –≤–µ—Ä—à–∏–Ω.
–ï—Å–ª–∏ –≥—Ä–∞—Ñ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å, –≤—ã–≤–µ–¥–∏—Ç–µ ‚àí1.

–ü—Ä–∏–º–µ—Ä
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
6 6
1 2
3 2
4 2
2 5
6 5
4 6
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
4 6 3 1 2 5
"""
import sys
import threading


RECURSION_LIMIT = 10 ** 9
STACK_SIZE = 2 ** 26
WHITE_COLOR = 0
GREY_COLOR = 1
BLACK_COLOR = 2


class Graph:
    def __init__(self, n):
        self.graph_list = [set() for _ in range(n)]
        self.colors = [WHITE_COLOR for _ in range(n)]
        self.has_cycle = False
        self.sorted_vs = []

    def add_edge(self, a, b):
        self.graph_list[a].add(b)

    def dfs(self, v):
        self.colors[v] = GREY_COLOR
        for v_neighbor in self.graph_list[v]:
            if WHITE_COLOR == self.colors[v_neighbor]:
                self.colors[v_neighbor] = GREY_COLOR
                self.dfs(v_neighbor)
            elif GREY_COLOR == self.colors[v_neighbor]:
                self.has_cycle = True
        self.sorted_vs.append(v + 1)
        self.colors[v] = BLACK_COLOR


def main():
    data = sys.stdin.buffer.read().splitlines()
    n, m = map(int, data[0].split())

    graph = Graph(n)
    for row in data[1:]:
        a, b = map(int, row.split())
        graph.add_edge(a - 1, b - 1)

    for v in range(n):
        if WHITE_COLOR == graph.colors[v] and not graph.has_cycle:
            graph.dfs(v)

    if graph.has_cycle:
        print(-1)
    else:
        print(' '.join(map(str, graph.sorted_vs[::-1])))


if __name__ == "__main__":
    sys.setrecursionlimit(RECURSION_LIMIT)
    threading.stack_size(STACK_SIZE)
    thread = threading.Thread(target=main)
    thread.start()
