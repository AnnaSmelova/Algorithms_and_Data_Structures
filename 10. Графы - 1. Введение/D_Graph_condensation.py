"""
D. –ö–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞

–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç: 2 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç: 256 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥

–ö–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏–µ–π –≥—Ä–∞—Ñ–∞ ùê∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –≥—Ä–∞—Ñ ùêª, –≥–¥–µ –∫–∞–∂–¥–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ —Å–∏–ª—å–Ω–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –≤ –≥—Ä–∞—Ñ–µ ùê∫
—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–µ—Ä—à–∏–Ω–∞ –∏–∑ –≥—Ä–∞—Ñ–∞ ùêª.
–†–µ–±—Ä–æ ùë£ùë¢ –≤ –≥—Ä–∞—Ñ–µ ùêª –µ—Å—Ç—å —Ç–æ–≥–¥–∞ –∏ —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤ –≥—Ä–∞—Ñ–µ ùê∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ä–µ–±—Ä–æ –∏–∑
—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π ùë£ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ —Å–∏–ª—å–Ω–æ–π —Å–≤—è–∑–Ω–æ—Å—Ç–∏, –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é ùë¢.

–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–±–µ—Ä –≤ –∫–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∞.
–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –∫–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏—è –≥—Ä–∞—Ñ–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫—Ä–∞—Ç–Ω—ã—Ö —Ä–µ–±–µ—Ä.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ ùëõ –∏ ùëö ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω –∏ —Ä–µ–±–µ—Ä –≥—Ä–∞—Ñ–∞
—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ (ùëõ‚â§10000, ùëö‚â§100000).
–°–ª–µ–¥—É—é—â–∏–µ ùëö —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–±–µ—Ä, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ.
–†–µ–±—Ä–æ –Ω–æ–º–µ—Ä ùëñ –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –¥–≤—É–º—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ ùëèùëñ, ùëíùëñ ‚Äî –Ω–∞—á–∞–ª–æ–º –∏ –∫–æ–Ω—Ü–æ–º —Ä–µ–±—Ä–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ (1 ‚â§ ùëèùëñ, ùëíùëñ ‚â§ ùëõ).
–í –≥—Ä–∞—Ñ–µ –º–æ–≥—É—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫—Ä–∞—Ç–Ω—ã–µ —Ä–µ–±—Ä–∞ –∏ –ø–µ—Ç–ª–∏.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω–æ —á–∏—Å–ª–æ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–±–µ—Ä –≤ –∫–æ–Ω–¥–µ–Ω—Å–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞.

–ü—Ä–∏–º–µ—Ä
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
4 4
2 1
3 2
2 3
4 3
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
2
"""
import sys
import threading


RECURSION_LIMIT = 10 ** 9
STACK_SIZE = 2 ** 26
WHITE_COLOR = 0
GREY_COLOR = 1


class Graph:
    def __init__(self, n):
        self.graph_list = [[] for _ in range(n)]
        self.colors = [WHITE_COLOR for _ in range(n)]
        self.sorted_vs = []

    def add_edge(self, a, b):
        self.graph_list[a].append(b)

    def dfs(self, v, color):
        self.colors[v] = color
        for v_neighbor in self.graph_list[v]:
            if WHITE_COLOR == self.colors[v_neighbor]:
                self.dfs(v_neighbor, color)
        self.sorted_vs.append(v)


def main():
    data = sys.stdin.buffer.read().splitlines()
    n, m = map(int, data[0].split())

    graph = Graph(n)
    graph_back = Graph(n)
    for row in data[1:]:
        a, b = map(int, row.split())
        a, b = a - 1, b - 1
        graph.add_edge(a, b)
        graph_back.add_edge(b, a)

    for v in range(n):
        if WHITE_COLOR == graph.colors[v]:
            graph.dfs(v, GREY_COLOR)

    color = WHITE_COLOR
    for v in graph.sorted_vs[::-1]:
        if WHITE_COLOR == graph_back.colors[v]:
            color += 1
            graph_back.dfs(v, color)

    cond_graph_edges = set()
    for v in range(n):
        for v_neighbor in graph.graph_list[v]:
            c_1, c_2 = graph_back.colors[v], graph_back.colors[v_neighbor]
            if c_1 != c_2:
                cond_graph_edges.add(f'{c_1}_{c_2}')
    print(len(cond_graph_edges))


if __name__ == "__main__":
    sys.setrecursionlimit(RECURSION_LIMIT)
    threading.stack_size(STACK_SIZE)
    thread = threading.Thread(target=main)
    thread.start()
