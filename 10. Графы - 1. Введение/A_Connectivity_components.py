"""
A. –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–≤—è–∑–Ω–æ—Å—Ç–∏

–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç: 2 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç: 256 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥

–î–∞–Ω –Ω–µ–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≥—Ä–∞—Ñ. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–¥–µ–ª–∏—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –≤ –Ω–µ–º.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ ùëõ –∏ ùëö ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ—Ä—à–∏–Ω –∏ —Ä–µ–±–µ—Ä –≥—Ä–∞—Ñ–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
(1‚â§ùëõ‚â§100000, 0‚â§ùëö‚â§200000).
–°–ª–µ–¥—É—é—â–∏–µ ùëö —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–±–µ—Ä –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫–µ.
–†–µ–±—Ä–æ –Ω–æ–º–µ—Ä ùëñ –æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –¥–≤—É–º—è –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏ ùëèùëñ, ùëíùëñ ‚Äî –Ω–æ–º–µ—Ä–∞–º–∏ –∫–æ–Ω—Ü–æ–≤ —Ä–µ–±—Ä–∞ (1‚â§ùëèùëñ,ùëíùëñ‚â§ùëõ).
–î–æ–ø—É—Å–∫–∞—é—Ç—Å—è –ø–µ—Ç–ª–∏ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ä–µ–±—Ä–∞.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤—ã–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ùëò ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –≥—Ä–∞—Ñ–∞.
–í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –≤—ã–≤–µ–¥–∏—Ç–µ ùëõ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª ùëé1,ùëé1,‚Ä¶,ùëéùëõ, –Ω–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—è—â–∏—Ö ùëò, –≥–¥–µ ùëéùëñ ‚Äî –Ω–æ–º–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–≤—è–∑–Ω–æ—Å—Ç–∏,
–∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç ùëñ-—è –≤–µ—Ä—à–∏–Ω–∞.

–ü—Ä–∏–º–µ—Ä 1
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
3 1
1 2
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
2
1 1 2

–ü—Ä–∏–º–µ—Ä 2
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
4 2
1 3
2 4
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
2
1 2 1 2
"""
import sys
import threading


RECURSION_LIMIT = 10 ** 9
STACK_SIZE = 2 ** 26
DEFAULT_COLOR = 0


class Graph:
    def __init__(self, n):
        self.graph_list = [set() for _ in range(n)]
        self.colors = [DEFAULT_COLOR for _ in range(n)]

    def add_edge(self, a, b):
        self.graph_list[a].add(b)
        self.graph_list[b].add(a)

    def dfs(self, v, color):
        self.colors[v] = color
        for v_neighbor in self.graph_list[v]:
            if DEFAULT_COLOR == self.colors[v_neighbor]:
                self.dfs(v_neighbor, color)


def main():
    data = sys.stdin.buffer.read().splitlines()
    n, m = map(int, data[0].split())

    graph = Graph(n)
    for row in data[1:]:
        a, b = map(int, row.split())
        graph.add_edge(a - 1, b - 1)

    color = DEFAULT_COLOR
    for v in range(n):
        if DEFAULT_COLOR == graph.colors[v]:
            color += 1
            graph.dfs(v, color)
    print(color)
    print(' '.join(map(str, graph.colors)))


if __name__ == "__main__":
    sys.setrecursionlimit(RECURSION_LIMIT)
    threading.stack_size(STACK_SIZE)
    thread = threading.Thread(target=main)
    thread.start()
