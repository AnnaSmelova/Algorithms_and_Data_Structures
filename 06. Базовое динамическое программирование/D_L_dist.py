"""
D. Расстояние по Левенштейну

ограничение по времени на тест: 2 секунды
ограничение по памяти на тест: 256 мегабайт
ввод: стандартный ввод
вывод: стандартный вывод

Дана текстовая строка. С ней можно выполнять следующие операции:
1. Заменить один символ строки на другой символ.
2. Удалить один произвольный символ.
3. Вставить произвольный символ в произвольное место строки.

Например, при помощи первой операции из строки «СОК» можно получить строку «СУК»,
при помощи второй операции — строку «ОК», при помощи третьей операции — строку «СТОК».

Минимальное количество таких операций, при помощи которых можно из одной строки получить другую,
называется стоимостью редактирования или расстоянием Левенштейна.

Определите расстояние Левенштейна для двух данных строк.

Входные данные
Программа получает на вход две строки, длина каждой из которых не превосходит 1000 символов,
строки состоят только из заглавных латинских букв.

Выходные данные
Требуется вывести одно число — расстояние Левенштейна для данных строк.

Пример
входные данные
ABCDEFGH
ACDEXGIH
выходные данные
3
"""


def l_dist_solution(str_a, str_b):
    lng_a = len(str_a)
    lng_b = len(str_b)
    if lng_a == 0 or lng_b == 0:
        return lng_a + lng_b

    dp = [[0] * (lng_b + 1) for _ in range(lng_a + 1)]

    for i in range(1, lng_a + 1):
        dp[i][0] = i
    for j in range(1, lng_b + 1):
        dp[0][j] = j

    for i in range(1, lng_a + 1):
        for j in range(1, lng_b + 1):
            lng_to_change = dp[i - 1][j - 1]
            if str_a[i - 1] != str_b[j - 1]:
                lng_to_change += 1
            lng_to_delete = dp[i][j - 1] + 1
            lng_to_insert = dp[i - 1][j] + 1
            dp[i][j] = min(lng_to_change, lng_to_delete, lng_to_insert)

    return dp[lng_a][lng_b]


def main():
    str_a = input()
    str_b = input()
    print(l_dist_solution(str_a, str_b))


if __name__ == "__main__":
    main()
