"""
C. Наибольшая возрастающая подпоследовательность

ограничение по времени на тест: 2 секунды
ограничение по памяти на тест: 256 мегабайт
ввод: стандартный ввод
вывод: стандартный вывод

Пусть a1,a2,...,an — числовая последовательность.
Длина последовательности — это количество элементов этой последовательности.
Последовательность ai1,ai2,...,aik называется подпоследовательностью последовательности a,
если 1≤i1<i2<...<ik≤n.
Последовательность a называется возрастающей, если a1<a2<...<an.

Вам дана последовательность, содержащая n целых чисел.
Найдите ее самую длинную возрастающую подпоследовательность.

Входные данные
В первой строке задано одно число n (1≤n≤2000) — длина подпоследовательности.
В следующей строке задано n целых чисел ai (-10^9≤ai≤10^9) — элементы последовательности.

Выходные данные
В первой строке выведите число k — длину наибольшей возрастающей подпоследовательности.
В следующей строке выведите k чисел — саму подпоследовательность.

Пример 1
входные данные
8
1 4 1 5 3 3 4 2
выходные данные
3
1 4 5

Пример 2
входные данные
3
1 2 3
выходные данные
3
1 2 3
"""


def li_subs_solution(n, a):
    dp = [1] * n
    pr = [-1] * n
    max_pos = n - 1
    max_sub_len = 1
    for i in range(1, n):
        max_len = 0
        for j in range(i):
            if a[j] < a[i] and dp[j] > max_len:
                max_len = dp[j]
                pr[i] = j
        dp[i] = max_len + 1
        if dp[i] > max_sub_len:
            max_sub_len = dp[i]
            max_pos = i
    subs = []
    j = max_pos
    while j >= 0:
        subs.append(str(a[j]))
        j = pr[j]

    return max_sub_len, subs[::-1]


def main():
    n = int(input())
    a = list(map(int, input().split()))
    result = li_subs_solution(n, a)
    print(result[0])
    print(' '.join(result[1]))


if __name__ == "__main__":
    main()
