"""
F. Поляна дров

ограничение по времени на тест: 2 секунды
ограничение по памяти на тест: 256 мегабайт
ввод: стандартный ввод
вывод: стандартный вывод

Маленький мальчик Ферма живет в деревне. Наступают холодные времена, поэтому бабушка попросила мальчика сходить в лес,
чтобы собрать дров. В лесу около деревни, в которой живет Ферма, находится волшебная Поляна Дров,
на которой всегда лежат дрова, и никогда не кончаются. Естественно, Ферма должен пойти именно туда.

Единственная проблема заключается в том, что идти до Поляны не очень близко, тем более что скорость передвижения
по лесу намного меньше, чем скорость передвижения по полю, в котором находится деревня.

 Деревня находится в точке с координатами  (0,1).

 Поляна находится в точке с координатами  (1,0).

 Граница между лесом и полем — горизонтальная прямая y=a, где a — некоторое число (0≤a≤1).

 Скорость передвижения по полю составляет Vp, скорость передвижения по лесу — Vf.
 Вдоль границы можно двигаться как по лесу, так и по полю.

Найдите точку, в которой мальчик Ферма должен войти в лес, чтобы дойти до Поляны Дров как можно быстрее.

Входные данные
В первой строке входного файла содержатся два положительных целых числа — Vp и Vf (1≤Vp,Vf≤10^5).
Во второй строке содержится единственное вещественное число — координата по оси Oy границы между лесом и полем a (0≤a≤1)
Выходные данные
В единственной строке выходного файла выведите вещественное число с точностью не менее 4 знаков после запятой
— координата по оси Ox точки, в которой мальчик Ферма должен войти в лес.

Пример
входные данные
5 3
0.4
выходные данные
0.783310604
"""
import sys
from math import log, ceil


EPS = 10**(-4)
MIN_VALUE = 0.0
MAX_VALUE = 1.0
ITN = ceil(log((MAX_VALUE - MIN_VALUE) / EPS, 1.5))


def get_time_by_x(a: float, vp: int, vf: int, x: float) -> float:
    return ((1 - a)**2 + x**2)**0.5 / vp + (a**2 + (1 - x)**2)**0.5 / vf


def get_firewood_time(a: float, vp: int, vf: int) -> float:
    left_val = MIN_VALUE
    right_val = MAX_VALUE
    for i in range(ITN):
        m1 = left_val + (right_val - left_val) / 3
        m2 = left_val + 2 * (right_val - left_val) / 3
        f_m1 = get_time_by_x(a, vp, vf, m1)
        f_m2 = get_time_by_x(a, vp, vf, m2)
        if f_m1 < f_m2:
            right_val = m2
        else:
            left_val = m1

    return right_val


def main():
    vp, vf = map(int, sys.stdin.readline().split())
    a = float(sys.stdin.readline())
    print(get_firewood_time(a, vp, vf))


if __name__ == "__main__":
    main()
