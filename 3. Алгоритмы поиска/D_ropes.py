"""
D. Веревочки

ограничение по времени на тест: 1 секунда
ограничение по памяти на тест: 256 мегабайт
ввод: стандартный ввод
вывод: стандартный вывод

С утра шел дождь, и ничего не предвещало беды. Но к обеду выглянуло солнце, и в лагерь заглянула СЭС.
Пройдя по всем домикам и корпусам, СЭС вынесла следующий вердикт:
бельевые веревки в жилых домиках не удовлетворяют нормам СЭС.
Как выяснилось, в каждом домике должно быть ровно по одной бельевой веревке,
и все веревки должны иметь одинаковую длину.
В лагере имеется N бельевых веревок и K домиков.
Чтобы лагерь не закрыли, требуется так нарезать данные веревки, чтобы среди получившихся веревочек
было K одинаковой длины. Размер штрафа обратно пропорционален длине бельевых веревок, которые будут
развешены в домиках. Поэтому начальство лагеря стремиться максимизировать длину этих веревочек.

Входные данные
В первой строке заданы два числа — N и K (1≤N,K≤10001).
Далее в каждой из последующих N строк записано по одному числу — длине очередной бельевой веревки.
Длина веревки задана в сантиметрах. Все длины лежат в интервале от 1 сантиметра до 100 километров включительно.
Выходные данные
В выходной файл следует вывести одно целое число — максимальную длину веревочек,
удовлетворяющую условию, в сантиметрах. В случае, если лагерь закроют, выведите 0.

Пример
входные данные
4 11
802
743
457
539
выходные данные
200
"""
import sys
from math import log2


def get_ropes_count(rope_len: int, ropes: list) -> int:
    ropes_cnt = 0
    for rope in ropes:
        ropes_cnt += rope // rope_len

    return ropes_cnt


def get_max_ropes_len(ropes: list, k: int) -> int:
    left_val = 0
    right_val = max(ropes)
    itn = int(log2(right_val - left_val)) + 1
    for i in range(itn):
        m = int((left_val + right_val) / 2) + 1
        if get_ropes_count(m, ropes) < k:
            right_val = m - 1
        else:
            left_val = m

    if left_val and get_ropes_count(left_val, ropes) < k:
        return 0

    return left_val


def main():
    n, k = map(int, sys.stdin.readline().split())
    ropes = []
    for _ in range(n):
        ropes.append(int(sys.stdin.readline()))
    print(get_max_ropes_len(ropes, k))


if __name__ == "__main__":
    main()
