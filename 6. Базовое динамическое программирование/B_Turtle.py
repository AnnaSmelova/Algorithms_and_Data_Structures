"""
B. Черепаха и монеты

ограничение по времени на тест: 2 секунды
ограничение по памяти на тест: 256 мегабайт
ввод: стандартный ввод
вывод: стандартный вывод

Черепаха хочет переползти из левого верхнего угла поля размером 𝑛 на 𝑚 клеток (2≤𝑛,𝑚≤1000) в правый нижний.
За один шаг она может переместиться на соседнюю клетку вправо или на соседнюю клетку вниз.
Кроме того, проходя через каждую клетку, Черепаха получает (или теряет) несколько золотых монет
(это число известно для каждой клетки).

Определите, какое максимальное количество монет может собрать Черепаха по пути и как ей нужно идти для этого.

Входные данные
В первой строке вводятся два натуральных числа: 𝑛 и 𝑚 (2≤𝑛,𝑚≤1000), разделённые пробелом.
В каждой из следующих 𝑛 строк записаны через пробел по 𝑚 чисел 𝑎𝑖𝑗(|𝑎𝑖𝑗|≤10),
которые обозначают количество монет, получаемых Черепашкой при проходе через каждую клетку.
Если это число отрицательное, Черепашка теряет монеты.

Выходные данные
В первой строке программа должна вывести наибольшее количество монет, которое может собрать Черепаха.
Во второй строке без пробелов выводятся команды, которые нужно выполнить Черепахе: буква 'R' (от слова right)
обозначает шаг вправо, а буква 'D' (от слова down) — шаг вниз.

Пример 1
входные данные
3 3
0 2 -3
2 -5 7
1 2 0
выходные данные
6
RRDD

Пример 2
входные данные
4 5
4 5 3 2 9
4 6 7 5 9
5 2 5 -3 -10
3 5 2 9 3
выходные данные
41
RDRDDRR
"""
INF = -float('inf')


def turtle_solution(n, m, costs):
    dp = [[0] * (m + 1) for _ in range(n + 1)]
    pr = [[0] * (m + 1) for _ in range(n + 1)]
    for i in range(n + 1):
        dp[i][0] = INF
    for j in range(m + 1):
        dp[0][j] = INF
    dp[1][1] = costs[1][1]
    pr[1][1] = (0, 0)

    for i in range(1, n + 1):
        for j in range(1, m + 1):
            if i > 1 or j > 1:
                max_cost = dp[i - 1][j]
                pr[i][j] = (i - 1, j)
                if max_cost < dp[i][j - 1]:
                    max_cost = dp[i][j - 1]
                    pr[i][j] = (i, j - 1)
                dp[i][j] = max_cost + costs[i][j]
    steps = []
    i = n
    j = m
    while i > 1 or j > 1:
        if pr[i][j][0] < i:
            steps.append('D')
        elif pr[i][j][1] < j:
            steps.append('R')
        i, j = pr[i][j]
    return dp[n][m], steps[::-1]


def main():
    n, m = map(int, input().split())
    costs = [[0] * (m + 1)]
    for i in range(n):
        costs_row = [0] + list(map(int, input().split()))
        costs.append(costs_row)
    result = turtle_solution(n, m, costs)
    print(result[0])
    print(''.join(result[1]))


if __name__ == "__main__":
    main()
