"""
C. –¶–∏—Ñ—Ä–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞

–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç: 3 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç: 256 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥

–î–∞–Ω–æ ùëõ —Å—Ç—Ä–æ–∫, –≤—ã–≤–µ–¥–∏—Ç–µ –∏—Ö –ø–æ—Ä—è–¥–æ–∫ –ø–æ—Å–ª–µ ùëò —Ñ–∞–∑ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
–í —ç—Ç–æ–π –∑–∞–¥–∞—á–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —á–∏—Å–ª–æ ùëõ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫, ùëö ‚Äî –∏—Ö –¥–ª–∏–Ω–∞ –∏
ùëò ‚Äì —á–∏—Å–ª–æ —Ñ–∞–∑ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (1‚â§ùëõ‚â§1000, 1‚â§ùëò‚â§ùëö‚â§1000).
–í —Å–ª–µ–¥—É—é—â–∏—Ö ùëõ —Å—Ç—Ä–æ–∫–∞—Ö –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–∞–º–∏ —Å—Ç—Ä–æ–∫–∏.
–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—ã–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω–∏ –±—É–¥—É—Ç –ø–æ—Å–ª–µ ùëò —Ñ–∞–∑ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.

–ü—Ä–∏–º–µ—Ä 1
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
3 3 1
bbb
aba
baa
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
aba
baa
bbb

–ü—Ä–∏–º–µ—Ä 2
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
3 3 2
bbb
aba
baa
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
baa
aba
bbb

–ü—Ä–∏–º–µ—Ä 3
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
3 3 3
bbb
aba
baa
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
aba
baa
bbb
"""
FIRST_LETTER = ord('a')
LAST_LETTER = ord('z')
CNT_ARRAY_LEN = LAST_LETTER - FIRST_LETTER + 1


def count_sort(a: list, n: int, digit: int) -> list:
    """–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–¥—Å—á–µ—Ç–æ–º

    :param a: list - –º–∞—Å—Å–∏–≤, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
    :param n: int - –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ a
    :param digit: int - —Ä–∞–∑—Ä—è–¥ —Å –∫–æ–Ω—Ü–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    :return: list - –º–∞—Å—Å–∏–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —Ä–∞–∑—Ä—è–¥—É digit –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–µ—É–±—ã–≤–∞–Ω–∏—è
    """
    cnt_a = [0] * CNT_ARRAY_LEN
    for el in a:
        cnt_a[ord(el[-digit]) - FIRST_LETTER] += 1

    pos_a = [0]
    for k in range(1, CNT_ARRAY_LEN):
        pos_a.append(pos_a[k - 1] + cnt_a[k - 1])

    res_a = [''] * n
    for el in a:
        j = ord(el[-digit]) - FIRST_LETTER
        res_a[pos_a[j]] = el
        pos_a[j] += 1

    return res_a


def radix_sort(a: list, n: int, k: int) -> list:
    """–¶–∏—Ñ—Ä–æ–≤–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞

    :param a: list - –º–∞—Å—Å–∏–≤, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–¥–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
    :param n: int - –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ a
    :param k: int - —á–∏—Å–ª–æ —Ñ–∞–∑ —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    :return: list - –º–∞—Å—Å–∏–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞ k —Ñ–∞–∑ –≤ –ø–æ—Ä—è–¥–∫–µ –Ω–µ—É–±—ã–≤–∞–Ω–∏—è
    """
    for i in range(1, k + 1):
        a = count_sort(a, n, i)

    return a


def main():
    a = []
    n, m, k = map(int, input().split())
    for _ in range(n):
        a.append(input())
    a_sorted = radix_sort(a, n, k)
    for el in a_sorted:
        print(el)


if __name__ == "__main__":
    main()
