"""
B. –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–≤–æ–∏—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ–∏—Å–∫–∞

–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç: 2 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç: 512 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥

–†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–≤–æ–∏—á–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ø–æ–∏—Å–∫–∞.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–µ—Ä–µ–≤–æ–º, –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10^5.
–í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–¥–Ω–∞ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
insert ùë• ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤ –¥–µ—Ä–µ–≤–æ –∫–ª—é—á ùë•. –ï—Å–ª–∏ –∫–ª—é—á ùë• –µ—Å—Ç—å –≤ –¥–µ—Ä–µ–≤–µ, —Ç–æ –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω–∞–¥–æ;
delete ùë• ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–∑ –¥–µ—Ä–µ–≤–∞ –∫–ª—é—á ùë•. –ï—Å–ª–∏ –∫–ª—é—á–∞ ùë• –≤ –¥–µ—Ä–µ–≤–µ –Ω–µ—Ç, —Ç–æ –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω–∞–¥–æ;
exists ùë• ‚Äî –µ—Å–ª–∏ –∫–ª—é—á ùë• –µ—Å—Ç—å –≤ –¥–µ—Ä–µ–≤–µ –≤—ã–≤–µ–¥–∏—Ç–µ ¬´true¬ª, –µ—Å–ª–∏ –Ω–µ—Ç ¬´false¬ª;
next ùë• ‚Äî –≤—ã–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –¥–µ—Ä–µ–≤–µ, —Å—Ç—Ä–æ–≥–æ –±–æ–ª—å—à–∏–π ùë•, –∏–ª–∏ ¬´none¬ª –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç;
prev ùë• ‚Äî –≤—ã–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –¥–µ—Ä–µ–≤–µ, —Å—Ç—Ä–æ–≥–æ –º–µ–Ω—å—à–∏–π ùë•, –∏–ª–∏ ¬´none¬ª –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç.
–í –¥–µ—Ä–µ–≤–æ –ø–æ–º–µ—â–∞—é—Ç—Å—è –∏ –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –ø–æ –º–æ–¥—É–ª—é 10^9.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—ã–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π exists, next, prev.
–°–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞.

–ü—Ä–∏–º–µ—Ä
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
insert 2
insert 5
insert 3
exists 2
exists 4
next 4
prev 4
delete 5
next 4
prev 4
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
true
false
5
3
none
3

–†–µ–∞–ª–∏–∑—É–π—Ç–µ AVL-–¥–µ—Ä–µ–≤–æ
"""
import sys


UNICODE = "utf-8"


class Node:
    def __init__(self, key=None):
        self.key = key
        self.height = 1
        self.balance = 0
        self.left = None
        self.right = None


class AVLTree:
    def __init__(self):
        self.root = None

    @staticmethod
    def fix(v):
        left_height = 0 if v.left is None else v.left.height
        right_height = 0 if v.right is None else v.right.height
        v.height = max(left_height, right_height) + 1
        v.balance = left_height - right_height
        return

    def small_rotate(self, p, dir='left'):
        if dir == 'left':
            q = p.right
            p.right = q.left
            q.left = p
        else:
            q = p.left
            p.left = q.right
            q.right = p
        self.fix(p)
        self.fix(q)
        return q

    def big_rotate(self, p, dir='left'):
        if dir == 'left':
            p.right = self.small_rotate(p.right, 'right')
        else:
            p.left = self.small_rotate(p.left, 'left')
        return self.small_rotate(p, dir)

    def balance(self, v):
        if v is None:
            return None
        if v.balance == -2 and v.right.balance <= 0:
            v = self.small_rotate(v, 'left')
        elif v.balance == -2 and v.right.balance > 0:
            v = self.big_rotate(v, 'left')
        elif v.balance == 2 and v.left.balance >= 0:
            v = self.small_rotate(v, 'right')
        elif v.balance == 2 and v.left.balance < 0:
            v = self.big_rotate(v, 'right')
        return v

    @staticmethod
    def get_height(v):
        if v is None:
            return 0
        return v.height

    def get_balance(self, v):
        if v is None:
            return 0
        return self.get_height(v.left) - self.get_height(v.right)

    def exists(self, v, x):
        if v is None:
            return 'false'
        elif v.key == x:
            return 'true'
        elif v.key > x:
            return self.exists(v.left, x)
        else:
            return self.exists(v.right, x)

    def insert(self, v, x):
        if v is None:
            return Node(x)
        if v.key > x:
            v.left = self.insert(v.left, x)
        elif v.key < x:
            v.right = self.insert(v.right, x)
        self.fix(v)
        return self.balance(v)

    def delete(self, v, x):
        if v is None:
            return None
        if v.key > x:
            v.left = self.delete(v.left, x)
        elif v.key < x:
            v.right = self.delete(v.right, x)
        else:
            if v.left is None:
                v = v.right
            elif v.right is None:
                v = v.left
            else:
                v.key = self.find_max(v.left).key
                v.left = self.delete(v.left, v.key)
        if v is not None:
            self.fix(v)
        return self.balance(v)

    @staticmethod
    def find_max(v):
        while v.right is not None:
            v = v.right
        return v

    def get_next(self, x, type='next'):
        v = self.root
        res = None
        while v is not None:
            if type == 'next':
                if v.key > x:
                    res = v
                    v = v.left
                else:
                    v = v.right
            else:
                if v.key < x:
                    res = v
                    v = v.right
                else:
                    v = v.left
        if res:
            return str(res.key)
        else:
            return 'none'


def main():
    data = sys.stdin.buffer.read().splitlines()

    tree = AVLTree()

    for operation in data:
        args = operation.decode(UNICODE).split()
        args[1] = int(args[1])
        if args[0] == 'insert':
            tree.root = tree.insert(tree.root, args[1])
        elif args[0] == 'delete':
            tree.root = tree.delete(tree.root, args[1])
        elif args[0] == 'exists':
            print(tree.exists(tree.root, args[1]))
        elif args[0] == 'next':
            print(tree.get_next(args[1], 'next'))
        elif args[0] == 'prev':
            print(tree.get_next(args[1], 'prev'))


if __name__ == "__main__":
    main()
