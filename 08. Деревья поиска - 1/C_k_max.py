"""
C. ùêæ -–π –º–∞–∫—Å–∏–º—É–º

–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç: 2 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç: 512 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥

–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, —Ä–µ–∞–ª–∏–∑—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∑–≤–æ–ª—è—é—â—É—é –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã,
–∞ —Ç–∞–∫–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—å ùëò-–π –º–∞–∫—Å–∏–º—É–º.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ùëõ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ (ùëõ‚â§100000).
–ü–æ—Å–ª–µ–¥—É—é—â–∏–µ ùëõ —Å—Ç—Ä–æ–∫ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ –∫–∞–∂–¥–∞—è. –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –≤–∏–¥–µ –¥–≤—É—Ö —á–∏—Å–µ–ª
ùëê_ùëñ –∏ ùëò_ùëñ ‚Äî —Ç–∏–ø –∏ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ (|ùëò_ùëñ|‚â§10^9). –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã:

+1 (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ 1): –î–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª—é—á–æ–º ùëòùëñ.
 0: –ù–∞–π—Ç–∏ –∏ –≤—ã–≤–µ—Å—Ç–∏ ùëòùëñ-–π –º–∞–∫—Å–∏–º—É–º.
-1: –£–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª—é—á–æ–º ùëòùëñ.

–ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ä–∞–≤–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –∏–ª–∏ —É–¥–∞–ª—è—Ç—å
–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã. –¢–∞–∫–∂–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ ùëò_ùëñ-–≥–æ –º–∞–∫—Å–∏–º—É–º–∞, –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–î–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω—É–ª–µ–≤–æ–≥–æ —Ç–∏–ø–∞ –≤ –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–≤–µ–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞,
—Å–æ–¥–µ—Ä–∂–∞—â–∞—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ ‚Äî ùëòùëñ-–π –º–∞–∫—Å–∏–º—É–º.

–ü—Ä–∏–º–µ—Ä
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
11
+1 5
+1 3
+1 7
0 1
0 2
0 3
-1 5
+1 10
0 1
0 2
0 3
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
7
5
3
10
7
3

–¢—É—Ç –Ω–∞–¥–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –≤ –≤–µ—Ä—à–∏–Ω–µ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∏—Å–ª–æ –≤–µ—Ä—à–∏–Ω –≤ –ø–æ–¥–¥–µ—Ä–µ–≤–µ
"""
import sys


class Node:
    def __init__(self, key=None):
        self.key = key
        self.height = 1
        self.balance = 0
        self.left = None
        self.right = None
        self.nodes_cnt = 1


class AVLTree:
    def __init__(self):
        self.root = None

    @staticmethod
    def fix(v):
        left_height = 0 if v.left is None else v.left.height
        right_height = 0 if v.right is None else v.right.height
        v.height = max(left_height, right_height) + 1
        left_nodes_cnt = 0 if v.left is None else v.left.nodes_cnt
        right_nodes_cnt = 0 if v.right is None else v.right.nodes_cnt
        v.nodes_cnt = left_nodes_cnt + right_nodes_cnt + 1
        v.balance = left_height - right_height
        return

    def small_rotate(self, p, dir='left'):
        if dir == 'left':
            q = p.right
            p.right = q.left
            q.left = p
        else:
            q = p.left
            p.left = q.right
            q.right = p
        self.fix(p)
        self.fix(q)
        return q

    def big_rotate(self, p, dir='left'):
        if dir == 'left':
            p.right = self.small_rotate(p.right, 'right')
        else:
            p.left = self.small_rotate(p.left, 'left')
        return self.small_rotate(p, dir)

    def balance(self, v):
        if v is None:
            return None
        if v.balance == -2 and v.right.balance <= 0:
            v = self.small_rotate(v, 'left')
        elif v.balance == -2 and v.right.balance > 0:
            v = self.big_rotate(v, 'left')
        elif v.balance == 2 and v.left.balance >= 0:
            v = self.small_rotate(v, 'right')
        elif v.balance == 2 and v.left.balance < 0:
            v = self.big_rotate(v, 'right')
        return v

    @staticmethod
    def get_height(v):
        if v is None:
            return 0
        return v.height

    def get_balance(self, v):
        if v is None:
            return 0
        return self.get_height(v.left) - self.get_height(v.right)

    def exists(self, v, x):
        if v is None:
            return 'false'
        elif v.key == x:
            return 'true'
        elif v.key > x:
            return self.exists(v.left, x)
        else:
            return self.exists(v.right, x)

    def insert(self, v, x):
        if v is None:
            return Node(x)
        if v.key > x:
            v.left = self.insert(v.left, x)
            v.nodes_cnt += 1
        elif v.key < x:
            v.right = self.insert(v.right, x)
            v.nodes_cnt += 1
        self.fix(v)
        return self.balance(v)

    def delete(self, v, x):
        if v is None:
            return None
        if v.key > x:
            v.left = self.delete(v.left, x)
        elif v.key < x:
            v.right = self.delete(v.right, x)
        else:
            if v.left is None:
                v = v.right
            elif v.right is None:
                v = v.left
            else:
                v.key = self.find_max(v.left).key
                v.left = self.delete(v.left, v.key)
        if v is not None:
            self.fix(v)
        return self.balance(v)

    @staticmethod
    def find_max(v):
        while v.right is not None:
            v = v.right
        return v

    def get_k_max(self, v, k):
        if v is None:
            return None
        pos = v.nodes_cnt - k + 1
        left_nodes_cnt = 0 if v.left is None else v.left.nodes_cnt
        right_nodes_cnt = v.nodes_cnt - left_nodes_cnt - 1
        if pos == left_nodes_cnt + 1:
            result = v.key
        elif pos <= left_nodes_cnt:
            result = self.get_k_max(v.left, k - right_nodes_cnt - 1)
        else:
            result = self.get_k_max(v.right, k)
        return result


def main():
    n = int(input())
    tree = AVLTree()
    for i in range(n):
        args = sys.stdin.readline().split(' ')
        args[1] = int(args[1])
        if args[0] == '+1' or args[0] == '1':
            tree.root = tree.insert(tree.root, args[1])
        elif args[0] == '-1':
            tree.root = tree.delete(tree.root, args[1])
        elif args[0] == '0':
            print(str(tree.get_k_max(tree.root, args[1])))


if __name__ == "__main__":
    main()
