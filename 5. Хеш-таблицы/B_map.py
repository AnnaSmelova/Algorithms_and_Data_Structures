"""
B. Map

–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç: 2 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç: 256 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥

–†–µ–∞–ª–∏–∑—É–π—Ç–µ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ö–µ—à —Ç–∞–±–ª–∏—Ü—ã.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π, –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 100000(10^5).
–í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–¥–Ω–∞ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
put ùë• ùë¶ ‚Äî –ø–æ—Å—Ç–∞–≤–∏—Ç—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á—É ùë• –∑–Ω–∞—á–µ–Ω–∏–µ ùë¶. –ï—Å–ª–∏ –∫–ª—é—á —É–∂–µ –µ—Å—Ç—å, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å.
delete ùë• ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á ùë•. –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ ùë• –Ω–µ—Ç, —Ç–æ –Ω–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω–∞–¥–æ.
get ùë• ‚Äî –µ—Å–ª–∏ –∫–ª—é—á ùë• –µ—Å—Ç—å –≤ –∞—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–º –º–∞—Å—Å–∏–≤–µ, —Ç–æ –≤—ã–≤–µ–¥–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –µ–º—É –∑–Ω–∞—á–µ–Ω–∏–µ, –∏–Ω–∞—á–µ –≤—ã–≤–µ–¥–∏—Ç–µ ¬´none¬ª.
–ö–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –¥–ª–∏–Ω–Ω–æ–π –Ω–µ –±–æ–ª–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.
–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—ã–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π get. –°–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞.

–ü—Ä–∏–º–µ—Ä
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
put hello privet
put bye poka
get hello
get bye
delete hello
get hello
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
privet
poka
none

–¢—É—Ç –Ω—É–∂–µ–Ω Map (–ª–æ–≥–∏—á–Ω–æ), —Ä–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–ª–ª–∏–∑–∏–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –º–µ—Ç–æ–¥–∞ —Ü–µ–ø–æ—á–µ–∫.
"""
import sys
from random import choice

SEPARATOR = "\n"
UNICODE = "utf-8"
MAX_SIZE = 10 ** 5
P_VALS = [655360001, 1073676287, 2971215073]
A_VALS = list(range(30, 101))


class Node:
    def __init__(self, key, value, next_node=None):
        self.key = key
        self.value = value
        self.next_node = next_node


class LinkedList:
    def __init__(self):
        self.head = None

    def get_value(self, key):
        curr_el = self.head
        while curr_el is not None:
            if curr_el.key == key:
                return curr_el
            curr_el = curr_el.next_node
        return None

    def insert_value(self, key, value):
        node = self.get_value(key)
        if node is not None:
            node.value = value
        else:
            self.head = Node(key, value, self.head)

    def delete_value(self, key):
        if self.head is None:
            return
        if self.head.key == key:
            self.head = self.head.next_node
            return
        prev_el = self.head
        curr_el = self.head.next_node
        while curr_el is not None:
            if curr_el.key == key:
                prev_el.next_node = curr_el.next_node
                break
            prev_el = curr_el
            curr_el = curr_el.next_node


class CustomMap:
    def __init__(self):
        self.capacity = MAX_SIZE * 2
        self.elements = [None] * self.capacity
        self.a = choice(A_VALS)
        self.p = choice(P_VALS)

    def get_hash_val(self, value):
        hash_value = 0
        current_a = self.a
        for char in value:
            hash_value = (hash_value * current_a + ord(char)) % self.p
            current_a = current_a * self.a % self.p
        return hash_value % self.capacity

    def put(self, key, value):
        hash_value = self.get_hash_val(key)
        if self.elements[hash_value] is None:
            self.elements[hash_value] = LinkedList()
        self.elements[hash_value].insert_value(key, value)

    def get(self, key):
        hash_value = self.get_hash_val(key)
        if self.elements[hash_value] is None:
            result = 'none'
        else:
            element = self.elements[hash_value].get_value(key)
            if element is None:
                result = 'none'
            else:
                result = element.value
        return result

    def delete(self, key):
        hash_value = self.get_hash_val(key)
        if self.elements[hash_value] is not None:
            self.elements[hash_value].delete_value(key)


def main():
    custom_map = CustomMap()
    data = sys.stdin.buffer.read().splitlines()
    results = []
    for operation in data:
        args = operation.decode(UNICODE).split()
        if args[0] == 'put':
            custom_map.put(args[1], args[2])
        elif args[0] == 'get':
            results.append(custom_map.get(args[1]))
        elif args[0] == 'delete':
            custom_map.delete(args[1])

    encoded_array = (SEPARATOR.join(results)).encode(UNICODE)
    sys.stdout.buffer.write(encoded_array)


if __name__ == "__main__":
    main()
