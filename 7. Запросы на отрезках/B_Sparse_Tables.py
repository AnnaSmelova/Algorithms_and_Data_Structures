"""
B. –†–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã

–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç: 2 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç: 256 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥

–î–∞–Ω –º–∞—Å—Å–∏–≤ –∏–∑ ùëõ —á–∏—Å–µ–ª.
–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–∞:
–Ω–∞–π—Ç–∏ –º–∏–Ω–∏–º—É–º –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ –º–µ–∂–¥—É u –∏ v –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–¥–∞–Ω—ã —Ç—Ä–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ n, m (1‚©Ωn‚©Ω10^5, 1‚©Ωm‚©Ω10^7) –∏ a_1 (0‚©Ωa_1<16714589) ‚Äî
–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —á–∏—Å–ª–∞ u_1 –∏ v_1 (1‚©Ωu_1,v_1‚©Ωn) ‚Äî –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å.

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Ä –≤–≤–æ–¥–∞ –±—ã–ª –Ω–µ–±–æ–ª—å—à–æ–π, –º–∞—Å—Å–∏–≤ –∏ –∑–∞–ø—Ä–æ—Å—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è.

–≠–ª–µ–º–µ–Ω—Ç—ã a_2,a_3,‚Ä¶,a_n –∑–∞–¥–∞—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–µ–π —Ñ–æ—Ä–º—É–ª–æ–π:
a_{i+1}=(23‚ãÖa_i+21563)mod16714589.
–ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ n=10, a_1=12345 –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Å—Å–∏–≤:
a = (12345, 305498, 7048017, 11694653, 1565158, 2591019, 9471233, 570265, 13137658, 1325095).

–ó–∞–ø—Ä–æ—Å—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:

u_{i+1}=((17‚ãÖu_i+751+r_i+2i)mod n)+1, v_{i+1}=((13‚ãÖv_i+593+r_i+5i)mod n)+1,
–≥–¥–µ r_i ‚Äî –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä i.
–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ u_i –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ, —á–µ–º v_i.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –≤—ã–≤–µ–¥–∏—Ç–µ u_m, v_m –∏ r_m (–ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ).

–ü—Ä–∏–º–µ—Ä
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
10 8 12345
3 9
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
5 3 1565158

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
–ú–æ–∂–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å, —á—Ç–æ –º–∞—Å—Å–∏–≤—ã ùë¢, ùë£ –∏ ùëü –º–æ–∂–Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ø–∞–º—è—Ç–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é.

–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ —Ä–µ—à–∞–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞–º–∏ Python 2 –∏ Python 3.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä—ã PyPy.
"""
MOD = 16714589
CONST_A1 = 23
CONST_A2 = 21563
CONST_U1 = 17
CONST_U2 = 751
CONST_U3 = 2
CONST_V1 = 13
CONST_V2 = 593
CONST_V3 = 5
INF = float('inf')


def get_k_power_of_two(k):
    return 1 << k


def get_next_a(prev_a):
    return (CONST_A1 * prev_a + CONST_A2) % MOD


def get_next_u(prev_u, prev_res, query_num, n):
    return ((CONST_U1 * prev_u + CONST_U2 + prev_res + CONST_U3 * query_num) % n) + 1


def get_next_v(prev_v, prev_res, query_num, n):
    return ((CONST_V1 * prev_v + CONST_V2 + prev_res + CONST_V3 * query_num) % n) + 1


def get_array_of_k(n):
    k = [None] * (n + 1)
    k[1] = 0
    for i in range(2, n + 1):
        k[i] = k[i - 1]
        if get_k_power_of_two(k[i] + 1) <= i:
            k[i] += 1
    return k


def sparse_tables_solution(n, m, a1, u, v):
    array_of_k = get_array_of_k(n)

    a = [0] * n
    dp = [[INF] * (array_of_k[n] + 1) for _ in range(n)]
    a[0] = a1
    dp[0][0] = a1
    for i in range(1, n):
        a[i] = get_next_a(a[i - 1])
        dp[i][0] = a[i]

    for j in range(1, array_of_k[n] + 1):
        for i in range(n):
            if (i + get_k_power_of_two(j - 1)) < n:
                dp[i][j] = min(dp[i][j - 1], dp[i + get_k_power_of_two(j - 1)][j - 1])

    for q in range(1, m + 1):
        left, right = min(u, v), max(u, v)
        k = array_of_k[right - left + 1]
        res = min(dp[left - 1][k], dp[right - get_k_power_of_two(k)][k])
        if q != m:
            u = get_next_u(u, res, q, n)
            v = get_next_v(v, res, q, n)

    return str(u), str(v), str(res)


def main():
    n, m, a1 = map(int, input().split())
    u1, v1 = map(int, input().split())
    print(' '.join(sparse_tables_solution(n, m, a1, u1, v1)))


if __name__ == "__main__":
    main()
