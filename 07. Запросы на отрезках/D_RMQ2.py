"""
D. RMQ2

–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç–µ—Å—Ç: 2 —Å–µ–∫—É–Ω–¥—ã
–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –ø–∞–º—è—Ç–∏ –Ω–∞ —Ç–µ—Å—Ç: 256 –º–µ–≥–∞–±–∞–π—Ç
–≤–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–≤–æ–¥
–≤—ã–≤–æ–¥: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —á–∏—Å–ª–æ n ‚Äî —Ä–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞. (1‚â§ùëõ‚â§10^5)
–í–æ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è n —á–∏—Å–µ–ª a_i ‚Äî —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞.
–î–∞–ª–µ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π, –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2‚ãÖ10^5.
–í –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –æ–¥–Ω–∞ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:
* set i j x ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ a[k], i‚â§k‚â§j –≤ x.
* add i j x ‚Äî —É–≤–µ–ª–∏—á–∏—Ç—å –≤—Å–µ a[k], i‚â§k‚â§j –Ω–∞ x.
* min i j ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ –Ω–∞ –æ—Ç—Ä–µ–∑–∫–µ —Å i –ø–æ j, –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ (1‚â§i‚â§j‚â§n).
–í—Å–µ —á–∏—Å–ª–∞ –≤–æ –≤—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç –ø–æ –º–æ–¥—É–ª—é 10^18.

–í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
–í—ã–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π min.
–°–ª–µ–¥—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç—É –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∏–∑ –ø—Ä–∏–º–µ—Ä–∞.

–ü—Ä–∏–º–µ—Ä
–≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
5
1 2 3 4 5
min 2 5
min 1 5
min 1 4
min 2 4
set 1 3 10
add 2 4 4
min 2 5
min 1 5
min 1 4
min 2 4
–≤—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
2
1
1
2
5
5
8
8

–¢—É—Ç —É–∂–µ –ø—Ä–∏–¥–µ—Ç—Å—è –Ω–∞–ø–∏—Å–∞—Ç—å –¥–µ—Ä–µ–≤–æ –æ—Ç—Ä–µ–∑–∫–æ–≤, –µ—â–µ –∏ —Å –≥—Ä—É–ø–ø–æ–≤—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏,
–µ—â–µ –∏ –Ω–µ—Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–º–∏, –Ω–∞–¥–æ –ø–æ–¥—É–º–∞—Ç—å, –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ "—Å—Ç–∞–∫–∞—é—Ç—Å—è"
"""
import sys

UNICODE = "utf-8"
INF = float('inf')


class SegmentTree:
    def __init__(self, array, n):
        self.full_array_size = self.get_k_power_of_two(self.get_k(n)) - 1
        self.tree_size = self.get_k_power_of_two(self.get_k(n) + 1) - 1
        self.tree = [INF] * self.tree_size
        self.build_tree(array, n)

        self.adds = [0] * self.tree_size
        self.sets = [None] * self.tree_size

    def build_tree(self, a, n):
        x = 1
        while x < n:
            x *= 2
        for i in range(n):
            self.tree[i + x - 1] = a[i]
        for v in range(x - 2, -1, -1):
            self.tree[v] = min(self.tree[2 * v + 1], self.tree[2 * v + 2])

    @staticmethod
    def get_k_power_of_two(k):
        return 1 << k

    def get_k(self, n):
        k = 0
        while self.get_k_power_of_two(k) < n:
            k += 1
        return k

    def set(self, v, left, right, a, b, x):
        self.push(v, left, right)
        if left > b or right < a:
            return
        if left >= a and right <= b:
            self.sets[v] = x
            return
        m = (left + right) // 2
        self.set(2 * v + 1, left, m, a, b, x)
        self.set(2 * v + 2, m + 1, right, a, b, x)
        self.tree[v] = min(self.get_node_value(2 * v + 1), self.get_node_value(2 * v + 2))

    def add(self, v, left, right, a, b, x):
        self.push(v, left, right)
        if left > b or right < a:
            return
        if left >= a and right <= b:
            self.adds[v] += x
            return
        m = (left + right) // 2
        self.add(2 * v + 1, left, m, a, b, x)
        self.add(2 * v + 2, m + 1, right, a, b, x)
        self.tree[v] = min(self.get_node_value(2 * v + 1), self.get_node_value(2 * v + 2))

    def rmq(self, v, left, right, a, b):
        self.push(v, left, right)
        if left > b or right < a:
            return INF
        if left >= a and right <= b:
            return self.tree[v]
        m = (left + right) // 2
        return min(self.rmq(2 * v + 1, left, m, a, b), self.rmq(2 * v + 2, m + 1, right, a, b))

    def get_node_value(self, v):
        if self.sets[v] is not None:
            return self.sets[v] + self.adds[v]
        else:
            return self.tree[v] + self.adds[v]

    def push(self, v, left, right):
        if left == right:
            if self.sets[v] is not None:
                self.tree[v] = self.sets[v] + self.adds[v]
                self.sets[v] = None
                self.adds[v] = 0
            else:
                self.tree[v] += self.adds[v]
                self.adds[v] = 0
        else:
            if self.sets[v] is not None:
                self.sets[2 * v + 1] = self.sets[v]
                self.sets[2 * v + 2] = self.sets[v]
                self.adds[2 * v + 1] = self.adds[v]
                self.adds[2 * v + 2] = self.adds[v]
            else:
                self.adds[2 * v + 1] += self.adds[v]
                self.adds[2 * v + 2] += self.adds[v]

            self.tree[v] = min(self.get_node_value(2 * v + 1), self.get_node_value(2 * v + 2))
            self.adds[v] = 0
            self.sets[v] = None


def main():
    data = sys.stdin.buffer.read().splitlines()
    n = int(data[0])
    a = list(map(int, data[1].split()))
    tree = SegmentTree(a, n)
    for operation in data[2:]:
        args = operation.decode(UNICODE).split()
        if args[0] == 'set':
            tree.set(0, 0, tree.full_array_size, int(args[1]) - 1, int(args[2]) - 1, int(args[3]))
        elif args[0] == 'add':
            tree.add(0, 0, tree.full_array_size, int(args[1]) - 1, int(args[2]) - 1, int(args[3]))
        else:
            print(tree.rmq(0, 0, tree.full_array_size, int(args[1]) - 1, int(args[2]) - 1))


if __name__ == "__main__":
    main()

'''
n = 5
a = [1, 2, 3, 4, 5]
tree = SegmentTree(a, n)
print(tree.rmq(0, 0, tree.full_array_size, 1, 4))
print(tree.rmq(0, 0, tree.full_array_size, 0, 4))
print(tree.rmq(0, 0, tree.full_array_size, 0, 3))
print(tree.rmq(0, 0, tree.full_array_size, 1, 3))
tree.set(0, 0, tree.full_array_size, 0, 2, 10)
tree.add(0, 0, tree.full_array_size, 1, 3, 4)
print(tree.rmq(0, 0, tree.full_array_size, 1, 4))
print(tree.rmq(0, 0, tree.full_array_size, 0, 4))
print(tree.rmq(0, 0, tree.full_array_size, 0, 3))
print(tree.rmq(0, 0, tree.full_array_size, 1, 3))

'''


